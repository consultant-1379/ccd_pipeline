# Prepare to deploy new CCD version
#
# Input: Deployment ID, CCD version to prepare
---
- hosts: localhost
  gather_facts: no
  vars_files:
    - vars/group_vars/minio.yml
  roles:
    - deployment_id
    - role: dtt # Get dtt_deployment and ddt_cookie
      vars:
        login: yes
  tasks:
    - name: Validate format of CCD version
      fail:
        msg: "Version {{ ccd_version }} does not match expected format"
      when: ccd_version | mandatory is not match("^\d+\.\d+\.\d+$")

    - name: Get CCD flavor name for {{ deployment_id }} from DTT
      set_fact:
        ccd_flavor_name: "{{ dtt_deployment.products | json_query(products_qry) | first | json_query(config_qry) | first }}"
      vars:
        products_qry: "[? product_type_name == 'CCD'].configuration"
        config_qry: "[? key_name == 'ccdFlavor'].key_value"

    - name: Get CCD flavor template file from Minio
      aws_s3:
        aws_access_key: "{{ minio_access_key }}"
        aws_secret_key: "{{ minio_secret_key }}"
        s3_url: "{{ minio_url }}"
        bucket: templates
        object: /managed-config/{{ ccd_flavor_name }}/{{ ccd_flavor_name }}.template.yml
        mode: getstr
        ignore_nonexistent_bucket: True
      register: ccd_flavor_template

    - name: Import variables from CCD flavor template file
      set_fact:
        ccd_flavor_values: "{{ ccd_flavor_template.contents | from_yaml }}"

    - name: Check if flavour version matches requested version
      block:
        - name: Log CCD versions
          debug:
            msg: "New version {{ ccd_version }} does not match current version {{ ccd_flavor_values.parameters.ccd_version }}"

        - name: Set new CCD version for flavour
          set_fact:
            new_version:
              parameters:
                ccd_version: "{{ ccd_version }}"

        - name: Save updated template
          copy:
            dest: /tmp/{{ ccd_flavor_name }}.template.yml
            content: "{{ ccd_flavor_values | combine(new_version, recursive=True) | to_nice_yaml }}"

        # TODO: (Once version handling decided)
        #   1. Check if target version directory already exists
        #   2. Strip old version suffix if needed (test1_2.15.0 -> test1_2.17.1)
        - name: Create new flavour template for CCD version {{ ccd_version }} in MinIO
          aws_s3:
            aws_access_key: "{{ minio_access_key }}"
            aws_secret_key: "{{ minio_secret_key }}"
            s3_url: "{{ minio_url }}"
            encrypt: no
            bucket: templates
            object: /managed-config/{{ ccd_flavor_name }}_{{ ccd_version }}/{{ ccd_flavor_name }}_{{ ccd_version }}.template.yml
            src: /tmp/{{ ccd_flavor_name }}.template.yml
            mode: put

        - name: Get CCD flavor env file from Minio
          aws_s3:
            aws_access_key: "{{ minio_access_key }}"
            aws_secret_key: "{{ minio_secret_key }}"
            s3_url: "{{ minio_url }}"
            bucket: templates
            object: /managed-config/{{ ccd_flavor_name }}/{{ ccd_flavor_name }}.env.yml
            ignore_nonexistent_bucket: True
            mode: get
            dest: /tmp/{{ ccd_flavor_name }}.env.yml
          register: ccd_flavor_env

        - name: Copy CCD flavor env file to Minio
          aws_s3:
            aws_access_key: "{{ minio_access_key }}"
            aws_secret_key: "{{ minio_secret_key }}"
            encrypt: no
            s3_url: "{{ minio_url }}"
            bucket: templates
            object: /managed-config/{{ ccd_flavor_name }}_{{ ccd_version }}/{{ ccd_flavor_name }}_{{ ccd_version }}.env.yml
            src: /tmp/{{ ccd_flavor_name }}.env.yml
            mode: put

        - name: Get Non-CCD DTT products
          set_fact:
            non_ccd_products: "{{ dtt_deployment.products | json_query(products_qry) }}"
          vars:
            products_qry: "[? product_type_name != 'CCD']"

        - name: Get CCD DTT product
          set_fact:
            ccd_product: "{{ dtt_deployment.products | json_query(products_qry) | first }}"
          vars:
            products_qry: "[? product_type_name == 'CCD']"

        - name: Remove existing ccdFlavor configuration field
          set_fact:
            updated_configuration: "{{ ccd_product.configuration | json_query(products_qry) }}"
          vars:
            products_qry: "[? key_name != 'ccdFlavor']"

        - name: Add new ccdFlavor configuration field
          set_fact:
            updated_configuration: "{{ updated_configuration + [{'key_name': 'ccdFlavor', 'key_value': ccd_flavor_name + '_' + ccd_version}] }}"

        - name: Update deployment product with merged configuration
          set_fact:
            updated_product: "{{ ccd_product | default([]) | combine({ 'configuration': updated_configuration}) }}"

        - name: Merge updated product with base deployment products list
          set_fact:
            updated_products: "{{ non_ccd_products + [updated_product] }}"

        - name: Update deployment with merged products list
          set_fact:
            updated_deployment: "{{ dtt_deployment | default([]) | combine({ 'products': updated_products}) }}"

        - name: Update deployment {{ deployment_id }} with new CCD version in DTT
          uri:
            use_proxy: no
            method: PUT
            url: "{{ dtt_url }}/api/deployments/{{ dtt_deployment._id }}"
            body: "{{ updated_deployment }}"
            body_format: json
            return_content: yes
            status_code: 200
            headers:
              Cookie: "{{ dtt_cookie }}"
          retries: 1
          delay: 3

      always:
        - name: Remove temp files
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - "/tmp/{{ ccd_flavor_name }}.template.yml"
            - "/tmp/{{ ccd_flavor_name }}.env.yml"

      when: ccd_flavor_values.parameters.ccd_version is not match(ccd_version)
