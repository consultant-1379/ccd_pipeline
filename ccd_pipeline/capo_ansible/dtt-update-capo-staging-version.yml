---
# Playbook to Update/Add the staging CAPO version to a deployment DTT entry.
# Version value is retrieved from the latest weekly pre-build of CAPO.
# This playbook is used as part of the staging pipeline.
#
# Required Vars:
# - deployment_id = String - Example ( ccd-c10a001 )
#
# Example usage
# -------------
# Manually enter ansible vault passwd:
# $ ansible-playbook dtt-update-capo-staging-version.yml -e deployment_id=<deployment_id> --ask-vault-pass
#
# Retrieve ansible vault passwd from file:
# $ ansible-playbook dtt-update-capo-staging-version.yml -e deployment_id=<deployment_id> --vault-password-file /path/to/file
#
- name: Update DTT With Staging CAPO Version
  hosts: localhost
  connection: local
  gather_facts: false
  environment:
    no_proxy: localhost, atvdtt.athtem.eei.ericsson.se, object.athtem.eei.ericsson.se
  vars:
    s3_storage_url: "{{ minio_url }}/de-cni/ccd"
    staging_dir_path: "/ccd/IMAGES/STAGING"
  roles:
    - role: add_buildserver_host
      vars:
        use_upgrade_build_server: yes
    - role: dtt
      vars:
        login: yes
  tasks:
    - name: Block to Update CCD Deployment with Configuration in DTT
      block:
        - name: Ensure tmp directory created
          file:
            path: ./tmp
            state: directory

        - name: Set Deployment DTT ID as variable
          set_fact:
            deployment_dtt_id: '{{ dtt_deployment._id }}'

        - name: Set both CCD & Non CCD Products from Deployment Products list
          set_fact:
            ccd_product: "{{ dtt_deployment.products | json_query(ccd_qry) | first }}"
            non_ccd_products: "{{ dtt_deployment.products | json_query(non_ccd_qry) }}"
          vars:
            ccd_qry: "[? product_type_name == 'CCD']"
            non_ccd_qry: "[? product_type_name != 'CCD']"

        - name: Set ccdFlavor as variable
          set_fact:
            ccd_flavor_name: "{{ ccd_product.configuration | json_query(config_qry) | first }}"
          vars:
            config_qry: "[? key_name == 'ccdFlavor'].key_value"

        - name: Verify ccd_flavor_name is defined
          assert:
            that: ccd_flavor_name is defined
            fail_msg:
              - Could not locate 'ccdFlavor' within the CCD Product data of DTT Deployment {{ deployment_id }}
              - Please verify & update DTT if required.
              - Exiting Playbook!

        - name: Download CCD Flavor Template file from Minio
          aws_s3:
            aws_access_key: "{{ minio_access_key }}"
            aws_secret_key: "{{ minio_secret_key }}"
            s3_url: "{{ minio_url }}"
            bucket: templates
            object: /managed-config/{{ ccd_flavor_name }}/{{ ccd_flavor_name }}.template.yml
            mode: getstr
            ignore_nonexistent_bucket: True
          register: ccd_flavor_template

        - name: Set CCD Version as variable
          set_fact:
            ccd_version: "{{ (ccd_flavor_template.contents | from_yaml).parameters.ccd_version }}"

        - name: Block to Verify Image present & get Staging Release Number
          delegate_to: "{{ build_server_ip }}"
          block:
            - name: Search '{{ staging_dir_path }}' for CAPO Images
              find:
                paths:  "{{ staging_dir_path }}"
                patterns: "capo-*"
                file_type: directory
              register: dir_exists

            - name: Assert that only 1 image present on Build Server
              assert:
                that: dir_exists.files | length == 1
                fail_msg:
                  - "Either there is more than one staging image found or there is none."
                  - "CAPO Images: {{ dir_exists.files | json_query('[].path') }}"
                  - "Please check & verify!"
                  - "If needed, Manual Delete may be required."
                  - "or"
                  - "Run playbook prepare-capo-staging-image-weekly.yml."
                  - "Exiting Playbook!"

            - name: Set the Staging release number from the Image present on Build Server
              set_fact:
                ccd_staging_version: "{{ (dir_exists.files|first).path | regex_replace('/ccd.*capo-','') | regex_replace('.{9}$','') }}"

        - name: Generate the new Product Configuration Data file
          template:
            src: templates/product-configuration-template-staging.j2
            dest: tmp/{{ deployment_id }}-new-configuration.json

        - name: "Save Product Configuration JSON as variable"
          set_fact:
            updated_configuration: "{{ lookup('file', 'tmp/{{ deployment_id }}-new-configuration.json') | from_json }}"

        - name: Get list of keys to exclude for config update
          set_fact:
            keys_to_exclude: "{{ updated_configuration | map(attribute='key_name') | list }}"

        - name: Merge Updated Configuration with Base Product Configuration list
          set_fact:
            updated_configuration: "{{ updated_configuration + [item] }}"
          loop: "{{ ccd_product.configuration }}"
          when: item.key_name not in keys_to_exclude

        - name: Update Deployment Product with merged configuration
          set_fact:
            updated_product: "{{ ccd_product | default([]) | combine({ 'configuration': updated_configuration}) }}"

        - name: Merge Updated Product with Base Deployment Products list
          set_fact:
            updated_products: "{{ non_ccd_products + [updated_product] }}"

        - name: Update Deployment with merged Products list
          set_fact:
            updated_deployment: "{{ dtt_deployment | default([]) | combine({ 'products': updated_products}) }}"

        - name: Update Deployment '{{ deployment_id }}' with updated CCD Product configuration in DTT
          uri:
            use_proxy: no
            method: PUT
            url: "{{ dtt_url }}/api/deployments/{{ deployment_dtt_id }}"
            body: "{{ updated_deployment }}"
            body_format: json
            return_content: yes
            status_code: 200
            headers:
              Cookie: "{{ dtt_cookie }}"
          retries: 1
          delay: 3

      always:
        - name: Delete tmp files directory
          file:
            path: ./tmp
            state: absent
